import json
import os

class JsonDB:
    def __init__(self, filepath):
        self.filepath = filepath
        self.data = self._load_data()

    def _load_data(self):
        if not os.path.exists(self.filepath):
            return []
        with open(self.filepath, 'r') as file:
            return json.load(file)

    def _save_data(self):
        with open(self.filepath, 'w') as file:
            json.dump(self.data, file, indent=2)

    def create(self, record):
        self.data.append(record)
        self._save_data()
        return len(self.data) - 1

    def read(self, **filters):
        if not filters:
            return self.data
        return [rec for rec in self.data if all(rec.get(k) == v for k, v in filters.items())]

    def update(self, record_id, updates):
        if 0 <= record_id < len(self.data):
            self.data[record_id].update(updates)
            self._save_data()
            return True
        return False

    def delete(self, record_id):
        if 0 <= record_id < len(self.data):
            del self.data[record_id]
            self._save_data()
            return True
        return False

class PeopleDB(JsonDB):
    def find_by_name(self, first_name=None, last_name=None):
        return [p for p in self.data if
                (first_name is None or p.get("first_name") == first_name) and
                (last_name is None or p.get("last_name") == last_name)]

    def create_person(self, first_name, last_name, email):
        if "@" not in email:
            raise ValueError("Invalid email")
        return self.create({
            "first_name": first_name,
            "last_name": last_name,
            "email": email
        })

class MeteoriteDB(JsonDB):
    def find_heaviest(self, top_n=5):
        sorted_data = sorted(self.data, key=lambda x: float(x.get("mass", 0)), reverse=True)
        return sorted_data[:top_n]

    def find_by_year_range(self, start, end):
        return [m for m in self.data if start <= int(m.get("year", 0)) <= end]

class EarthquakeDB(JsonDB):
    def filter_by_magnitude(self, min_mag):
        return [q for q in self.data if float(q.get("magnitude", 0)) >= min_mag]

    def filter_by_place(self, keyword):
        return [q for q in self.data if keyword.lower() in q.get("place", "").lower()]
